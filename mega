#!/usr/bin/env python
"""

Environment variables:
  Must set CHECKOUT_LOCATIONS and some of:
    GITREPO_DIRS, HGREPO_DIRS and SVNREPO_DIRS
  or:
    <vcs>REPO_PATHS

"""
from __future__ import print_function

import os
from os.path import abspath, expanduser, isdir, realpath
from os.path import join as pjoin
import shlex
import subprocess
import sys

vcss = [ 'svn', 'hg', 'git' ]
translations = {
  'svn': { 'push': ['ci'], 'pull': ['up']},
  'hg' : { 'pull': ['pull', 'up'] },
}

def get_paths(vcs):
  """
  Uses environment variables:
  <vcs>REPO_DIRS: the names of eligible repos, which may exist inside
    CHECKOUT_LOCATIONS
  <vcs>REPO_PATHS: full paths to repos
  """
  checkout_locations = os.environ.get('CHECKOUT_LOCATIONS', '').split()
  vcs_repo_dirs = os.environ.get('{}REPO_DIRS'.format(vcs.upper()), '').split()
  vcs_repo_paths = os.environ.get('{}REPO_PATHS'.format(vcs.upper()), '').split()
  potential_paths = [ p for p in vcs_repo_paths if isdir(p) ]

  for c in checkout_locations:
    joined = [ pjoin(abspath(expanduser(c)), p) for p in vcs_repo_dirs ]
    potential_paths = potential_paths + [ j for j in joined if isdir(j) ]
  return sorted(set(realpath(p) for p in potential_paths))

def translate(vcs, operation):
  """
  translate a CLI operation into args for the VCS.
  Operations:Commands are not always a 1:1 mapping

  @return list of strings
  """
  return translations.get(vcs, {}).get(operation, [operation])

def vcs_command(vcs, path, operation):
  commands = translate(vcs, operation)
  os.chdir(path)
  for c in commands:
    print('=== {} ==='.format(path))
    subprocess.call([vcs] + shlex.split(c))

def main():
  operations = sys.argv[1:]

  paths = { vcs: get_paths(vcs) for vcs in vcss }

  for vcs in sorted(vcss):
    for path in paths[vcs]:
      for operation in operations:
        vcs_command(vcs, path, operation)

if __name__ == '__main__':
  main()
