#!/usr/bin/env python
"""
remv: script to move the target of a symlink

2023-12: Appears to still be WIP - could complete or discard.
  Perhaps this is already supported by rsync?
"""
import os
from os.path import abspath, basename, isdir, realpath
from os.path import exists as pexists
from os.path import join as pjoin
import shutil
import sys


def remv(src, dst):
    """
    This works for a symlinked directory full of files.
    It _does not_ work for a directory full of symlinks :-/
    """
    resolved_src = realpath(src)
    if not pexists(resolved_src):
        print("{} does not exist, skipping".format(src))
        return
    last_element = basename(resolved_src)
    if isdir(dst):
        dst = pjoin(dst, last_element)
    else:
        # this is easier than handling cases like directory-paths which do not exist
        raise Exception("dst must be a directory which exists. Got: {}".format(dst))

    contents = sorted(os.listdir(resolved_src))
    for c in contents:
        if isdir(c):
            raise Exception("src contains directories - this is unsupported")

    if not isdir(dst):
        os.mkdir(dst)

    for c in contents:
        resolved_c = realpath(pjoin(resolved_src, c))
        basename_c = basename(resolved_c)
        full_dst = pjoin(dst, basename_c)

        if pexists(full_dst):
            raise Exception("dst already exists - investigate and maybe remove")

    for c in contents:
        resolved_c = realpath(pjoin(resolved_src, c))
        basename_c = basename(resolved_c)
        full_dst = pjoin(dst, basename_c)

        print("Printing, not moving...")
        print("shutil.mv({},{})".format(resolved_c, full_dst))

        # resolve the symlink
        # move the resolved target to the destination
        # shutil.move(resolved_src, dst)


def main(sources, dst):
    for source in sources:
        remv(source, dst)


if __name__ == "__main__":
    if len(sys.argv) < 3:
        raise Exception("Must pass src and dst")

    main(sys.argv[1:-1], sys.argv[-1])
